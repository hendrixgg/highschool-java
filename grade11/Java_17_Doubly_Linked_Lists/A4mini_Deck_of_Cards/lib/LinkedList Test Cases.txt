	/* Test 1 contains(String s)
         * ****************************
         * Test 1.0 not found on empty list
         * Test 1.1 not found with one node on list
         * Test 1.2 not found more than one node on the list
         * Test 1.3 found at the front
         * Test 1.4 found at the end
         * Test 1.5 found between two nodes
         */

	/* Test 2 addFirst(Node node) & check size()
         * ******************
         * Test 2.0 check is list is empty upon creation and size is 0
         * Test 2.1 added on an empty list  (check new front and new last) and size is 1
         * Test 2.2 added on a non empty list (check new front and last) and size is one more than before
         * Test 2.3 elements are identical front to back and back to front
         */

	 /* Test 3 insertAfter(String key, Node node) & check size()
         ***********************
         * Test 3.0 insertion occurs at the end (check front and new last)
         * Test 3.1 insertion occurs between two nodes
         * Test 3.2 key not found on non-empty list
         * Test 3.3 key not found on empty list
         */

	/* 4 addLast (Node n) & check size()
         ****************
         * Test 4.0 added on an empty list (check new front and new last)
         * Test 4.1 added on a non-empty list (check front a new last)
         * Test 4.2 elements are identical front to back and back to front
         */
        
	/* 5 delete(String key) & check size()
         ******************
         * Test 5.0 deletion occurs at the front (check new front and last)
         * Test 5.1 deletion occurs at the end (check front and new last)
         * Test 5.2 deletion occurs between two nodes
         * Test 5.3 key not found on empty list
         * Test 5.4 key not found on a non-empty list
         */

	/* Test 6 removeFront() & check size()
         *************
         * Test 6.0 invoked on an empty list
         * Test 6.1 invoked on a single node (check new front and new last)
         * Test 6.2 invoked on a non empty list with 2+ nodes (check new front) 
         */

	/* Test 7 removeEnd() & check size()
         ***********
         * Test 7.0 invoked on an empty list
         * Tets 7.1 invoked on a single node (check front and new last)
         * Test 7.2 invoked on a non empty list with 2+ nodes (check new end)
	
	/* Test 8 insertBefore(String key, Node node) & check size()
         ***********************
         * Test 8.0 insertion occurs at the front(check new front and last)
         * Test 8.1 insertion occurs between two nodes
         * Test 8.2 key not found on empty list
         * Test 8.3 key not found on non-empty list
         */

 	/* Test 9 deleteElementAt(int index) & check size()
         **************************
         * Test 9.0 deletion occurs at the front/end with one item (check new front and new last)
         * Test 9.1 deletion occurs at the front with 2+ items (check new front and last)
         * Test 9.2 deletion occurs at the end with 2+ items (check front and new last)
         * Test 9.3 deletion occurs between two nodes
         * Test 9.4 index not found on empty list
         * Test 9.5 index not found on a non-empty list
         */ 

	/* Test 10 toString(), toReverseString()
         * ****************
         * Test 10.0 call toString()/toReverseString on non empty list
         * Test 10.1 call toString()/toReverseString on empty list
         */
